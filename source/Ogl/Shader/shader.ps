#version 330 core

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

out vec4 color;

//uniform vec3 objectColor;
//uniform vec3 lightColor;
//uniform vec3 lightPos;

uniform vec3 viewPos;

struct Material
{
	vec3 ambient;
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform Material material;

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform Light light;

void main()
{
	vec3 lightDir = normalize(light.position - FragPos);
	vec3 normal = normalize(Normal);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.diffuse, TexCoords));

	vec3 ambient = vec3(texture(material.diffuse, TexCoords)) * light.ambient;


   vec3 viewDir = normalize(viewPos - FragPos);
   vec3 reflectDir = reflect(-lightDir, normal);
   float spec = pow(max(dot(reflectDir, viewDir), 0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
 // vec3 specular = light.specular * spec * material.specular;

	vec3 result = ambient + diffuse + specular;
   color = vec4(result, 1.0f);
}