#version 330 core

in vec3 Normal;
in vec3 FragPos;

out vec4 color;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;

uniform vec3 viewPos;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
uniform Material material;

void main()
{
	vec3 lightDir = normalize(lightPos - FragPos);
	vec3 normal = normalize(Normal);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = diff * lightColor * material.diffuse;

   float ambientStrength = 0.1f;
   //vec3 ambient = ambientStrength * lightColor;
   vec3 ambient = material.ambient * lightColor;


   vec3 viewDir = normalize(viewPos - FragPos);
   vec3 reflectDir = reflect(-lightDir, normal);
   float spec = pow(max(dot(reflectDir, viewDir), 0), material.shininess);
   vec3 specular = lightColor * (spec * material.specular);

  // vec3 result = (ambient + diffuse + specular) * objectColor;
  vec3 result = ambient + diffuse + specular;
   color = vec4(result, 1.0f);

}